{
    "prereq": [
        {
            "update-user-perms": "sudo usermod -aG dialout,sudo,input $USER",
            "add-ros-source": [
                "sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'",
                "sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654",
                "sudo apt-get update"
            ],
            "install-utils": "sudo apt-get install git nano net-tools openssh-server ros-melodic-desktop python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential ros-melodic-serial ros-melodic-joy ros-melodic-twist-mux ros-melodic-tf2-geometry-msgs ros-melodic-robot-localization ros-melodic-gmapping ros-melodic-move-base -y",
            "remove-modemmanger": "sudo apt-get remove modemmanager -y",
            "update-ros-dept": [
                "sudo rosdep init",
                "rosdep update"
            ]
        }
    ],
    "rover_ros_subsystem_files": [
        {
            "create_rover_ros_env": [
                "sudo mkdir -p /etc/roverrobotics/",
                "cat << EOF1 | sudo tee /etc/roverrobotics/env.sh",
                "#!/bin/sh",
                "export ROS_HOSTNAME=localhost",
                "export ROS_MASTER_URI=http://localhost:11311",
                "EOF1",
                "if [ -f /etc/roverrobotics/env.sh ]",
                "then",
                "    echo \"create_rover_ros_env: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_rover_ros_env: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "create_rover_roscore": [
                "cat << EOF2 | sudo tee /etc/systemd/system/roscore.service",
                "[Unit]",
                "After=NetworkManager.service time-sync.target",
                "[Service]",
                "Type=forking",
                "User=$USER",
                " ExecStart=/bin/sh -c \". /opt/ros/melodic/setup.sh; . /etc/roverrobotics/env.sh; roscore & while ! echo exit | nc localhost 11311 > /dev/null; do sleep 1; done\" ",
                "[Install]",
                "WantedBy=multi-user.target",
                "EOF2",
                "sudo systemctl enable roscore.service",
                "if [ -f /etc/systemd/system/roscore.service ]",
                "then",
                "    echo \"create_rover_roscore: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_rover_roscore: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "create_rover_startup_service": [
                "cat << EOF3 | sudo tee /etc/systemd/system/roverrobotics.service",
                "[Unit]",
                "Requires=roscore.service",
                "PartOf=roscore.service",
                "After=NetworkManager.service time-sync.target roscore.service",
                "[Service]",
                "Type=simple",
                "User=$USER",
                "ExecStart=/usr/sbin/roverrobotics",
                "[Install]",
                "WantedBy=multi-user.target",
                "EOF3",
                "sudo systemctl enable roverrobotics.service",
                "if [ -f /etc/systemd/system/roverrobotics.service ]",
                "then",
                "    echo \"create_rover_startup_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_rover_startup_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "ds4": [
        {
            "download_ds4_driver_ros1": [
                "mkdir -p ~/catkin_ws/src",
                "cd ~/catkin_ws/src/",
                "git clone $KEY_DS4_ROS $KEYV_DS4_ROS",
                "if [ -d ~/catkin_ws/src/$KEYV_DS4_ROS ]",
                "then",
                "    echo \"download_ds4_driver_ros1: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_ds4_driver_ros1: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "install_ds4_driver": [
                "mkdir -p ~/drivers",
                "cd ~/drivers",
                "git clone $KEY_DS4_DRV ds4drv",
                "cd ds4drv",
                "mkdir -p ~/.local/lib/python2.7/site-packages",
                "python2 setup.py install --prefix ~/.local",
                "sudo cp -rf udev/50-ds4drv.rules /etc/udev/rules.d/",
                "sudo udevadm control --reload-rules && sudo udevadm trigger",
                "if [ -f ~/.local/bin/ds4drv ]",
                "then",
                "    echo \"install_ds4_driver: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"install_ds4_driver: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_test_repo": [
        {
            "download_test_repo": [
                "cd ./testing",
                "git clone $KEY_ROVER_TESTS $KEYV_ROVER_TESTS",
                "if [ -d ./$KEYV_ROVER_TESTS ]",
                "then",
                "    echo \"download_test_repo: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_test_repo: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rpilidar_repo": [
        {
            "download_rpi_lidar": [
                "mkdir -p ~/catkin_ws/src",
                "cd ~/catkin_ws/src/",
                "git clone $KEY_RPI_ROS $KEYV_RPI_ROS",
                "if [ -d ~/catkin_ws/src/$KEYV_RPI_ROS ]",
                "then",
                "    echo \"rpilidar_repo: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"rpilidar_repo: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_startup_script": [
        {
            "create_startup_script": [
                "cat << \"EOF2\" | sudo tee /usr/sbin/roverrobotics",
                "#!/bin/bash",
                "source ~/catkin_ws/devel/setup.bash",
                "source /etc/roverrobotics/env.sh",
                "export ROS_HOME=$(echo /home/$USER)/.ros",
                "roslaunch placeholder &",
                "PID=$!",
                "wait \"$PID\"",
                "EOF2",
                "sudo chmod +x /usr/sbin/roverrobotics",
                "if [ -f /usr/sbin/roverrobotics ]",
                "then",
                "    echo \"create_startup_script: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_startup_script: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "can_service": [
        {
            "create_can_service": [
                "cat << EOF6 | sudo tee /etc/systemd/system/can.service",
                "[Unit]",
                "After=NetworkManager.service time-sync.target roscore.service",
                "[Service]",
                "Type=simple",
                "User=root",
                "ExecStart=/enablecan.sh",
                "[Install]",
                "WantedBy=multi-user.target",
                "EOF6",
                "sudo systemctl enable can.service",
                "if [ -f /etc/systemd/system/can.service ]",
                "then",
                "    echo \"create_can_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_can_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "create_can_script": [
                "cat << EOF7 | sudo tee /enablecan.sh",
                "#!/bin/bash",
                "sudo busybox devmem 0x0c303000 32 0x0000C400",
                "sudo busybox devmem 0x0c303008 32 0x0000C458",
                "sudo modprobe can",
                "sudo modprobe can_raw",
                "sudo modprobe mttcan",
                "sudo ip link set can0 type can bitrate 500000 sjw 127 dbitrate 2000000 dsjw 15 berr-reporting on fd on",
                "#sudo ip link set can1 type can bitrate 500000 dbitrate 2000000 berr-reporting on fd on",
                "sudo ip link set up can0",
                "#sudo ip link set up can1",
                "EOF7",
                "sudo chmod +x /enablecan.sh",
                "if [ -f /enablecan.sh ]",
                "then",
                "    echo \"create_can_script: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_can_script: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "enable_can_once": [
                "sudo modprobe can",
                "sudo modprobe can_raw",
                "sudo modprobe mttcan",
                "sudo ip link set can0 type can bitrate 500000 sjw 127 dbitrate 2000000 dsjw 15 berr-reporting on fd on",
                "sudo ip link set up can0",
                "if ifconfig | grep -q can0 ",
                "then",
                "    echo \"enable_can_once: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"enable_can_once: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "roverrobotics_ros1": [
        {
            "download_roverrobotics_ros1": [
                "mkdir -p ~/catkin_ws/src",
                "cd ~/catkin_ws/src/",
                "git clone $KEY_ROVER_ROS1 $KEYV_ROVER_ROS1",
                "if [ -d ~/catkin_ws/src/$KEYV_ROVER_ROS1 ]",
                "then",
                "    echo \"download_roverrobotics_ros1: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_roverrobotics_ros1: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "download_librover": [
                "mkdir -p ~/drivers",
                "cd ~/drivers",
                "git clone $KEY_LIBROVER $KEYV_LIBROVER",
                "if [ -d ~/drivers/$KEYV_LIBROVER ]",
                "then",
                "    echo \"download_librover: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_librover: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "install_librover": [
                "cd ~/drivers/librover",
                "cmake .",
                "sudo make install",
                "if [ -f /usr/lib/liblibrover.so ]",
                "then",
                "    echo \"install_librover: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"install_librover: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "setup_launch_pro": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_PRO_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_PRO_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "setup_launch_pro2": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_PRO2_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_PRO2_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "setup_launch_mini": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_MINI_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_MINI_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
                
            ]
        }
    ],
    "setup_launch_zero2": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_ZERO2_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_ZERO2_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_udev": [
        {
            "create_udev": [
                "cat << EOF8 | sudo tee /etc/udev/rules.d/55-roverrobotics.rules",
                "#creates fixed name for rover serial communication",
                "#rover zero v2",
                "KERNEL==\"ttyUSB[0-9]\", ATTRS{idVendor}==\"0403\", ATTRS{serial}==\"Rover Zero 2\", MODE:=\"0777\", SYMLINK+=\"rover-zero-v2\", RUN+=\"/bin/setserial /dev/%k low_latency\" ",
                "# rover pro",
                "KERNEL==\"ttyUSB[0-9]\", ATTRS{idVendor}==\"0403\", ATTRS{serial}==\"Rover Pro\", MODE:=\"0777\", SYMLINK+=\"rover-pro\", RUN+=\"/bin/setserial /dev/%k low_latency\"",
                "KERNEL==\"ttyUSB[0-9]\", ATTRS{idVendor}==\"10c4\", ATTRS{serial}==\"Rover Pro\", MODE:=\"0777\", SYMLINK+=\"rover-pro\", RUN+=\"/bin/setserial /dev/%k low_latency\"",
                "EOF8",
                "sudo udevadm control --reload-rules && sudo udevadm trigger",
                "stty -F /dev/rover-pro 57600 litout -crtscts",
                "if [ -f /etc/udev/rules.d/55-roverrobotics.rules ]",
                "then",
                "    echo \"create_udev: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_udev: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"

            ]
        }
    ],
    "catkin_make": [
        {
            "update_ros_dep": [
                "cd ~/catkin_ws",
                "rosdep install --from-paths src --ignore-src -r -y",
                "echo source ~/catkin_ws/devel/setup.bash >> ~/.bashrc",
                "echo source /opt/ros/melodic/setup.bash >> ~/.bashrc",
                "source ~/.bashrc",
                "source /opt/ros/melodic/setup.bash",
                "catkin_make"
            ]
        }
    ],
    "start_rover_ros1_services": [
        {
            "start_roscore_service": [
                "source /opt/ros/melodic/setup.bash",
                "source ~/catkin_ws/devel/setup.bash",
                "sudo systemctl start roscore.service",
                "if sudo systemctl status roscore.service | grep -i running",
                "then",
                "    echo \"start_roscore_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"start_roscore_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
                
            ],
            "start_roverrobotics_service": [
                "source /opt/ros/melodic/setup.bash",
                "source ~/catkin_ws/devel/setup.bash",
                "sudo systemctl start roverrobotics.service",
                "if sudo systemctl status roverrobotics.service | grep -i running",
                "then",
                "    echo \"start_roverrobotics_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"start_roverrobotics_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "uninstall_scripts": [
        {
            "remove-catkin_ws": [
                "sed -i '/melodic/d' ~/.bashrc",
                "sed -i '/catkin_ws/d' ~/.bashrc",
                "sudo mv ~/catkin_ws/ ~/catkin_ws_old/",
                "sudo rm -rf ~/drivers #librover and ps4 driver",
                "sudo rm -rf ~/.local/lib/python2.7/site-packages/ds4drv-0.5.1-py2.7.egg #installed ps4 driver",
                "sudo rm -rf ~/.local/bin/ds4drv",
                "sudo rm -rf /etc/udev/rules.d/50-ds4drv.rules #ps4 udev",
                "sudo rm -rf /etc/udev/rules.d/55-roverrobotics.rules #rover udev",
                "sudo rm -rf ~/rover_tools/testing/$KEYV_ROVER_TESTS #robot test",
                "sudo rm -rf /etc/roverrobotics #env",
                "sudo rm -rf /usr/sbin/roverrobotics #selector",
                "sudo rm -rf /etc/systemd/system/roscore.service #ros service",
                "sudo rm -rf /etc/systemd/system/roverrobotics.service #robot service",
                "sudo rm /etc/systemd/system/can.service #can startup",
                "sudo rm -rf /enablecan.sh #can enabler",
                "source ~/.bashrc"
            ]
        }
    ]
}
